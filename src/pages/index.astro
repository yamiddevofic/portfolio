---
import BaseLayout from '../Layouts/BaseLayout.astro';
---

<BaseLayout title="Yamid Rodriguez">
  <div class="diagram-wrapper">
    <!-- Controles de Zoom -->
    <div class="zoom-controls">
      <button id="zoomIn" class="zoom-btn" title="Acercar">+</button>
      <button id="zoomOut" class="zoom-btn" title="Alejar">−</button>
      <button id="resetZoom" class="zoom-btn reset" title="Restablecer">⌂</button>
      <span class="zoom-level" id="zoomLevel">100%</span>
    </div>

    <div id="mermaid-container" class="mermaid-container">
      <div id="mermaid-diagram" class="mermaid-content"></div>
    </div>
  </div>

  <script type="module">
    import mermaid from 'mermaid';
  
    const diagramDefinition = `...`;
  
    let currentZoom = 1;
    let isDragging = false;
    let startX = 0;
    let startY = 0;
    let translateX = 0;
    let translateY = 0;
    let diagramElement = null;
  
    mermaid.initialize({
      startOnLoad: true,
      securityLevel: 'loose'
    });
  
    function updateZoomLevel() {
      const zoomLevelElem = document.getElementById('zoomLevel');
      if (zoomLevelElem) {
        zoomLevelElem.textContent = Math.round(currentZoom * 100) + '%';
      }
    }
  
    function applyTransform() {
      if (diagramElement) {
        diagramElement.style.transform = `translate(${translateX}px, ${translateY}px) scale(${currentZoom})`;
      }
    }
  
    function zoomIn() {
      currentZoom = Math.min(currentZoom * 1.2, 8);
      applyTransform();
      updateZoomLevel();
    }
  
    function zoomOut() {
      currentZoom = Math.max(currentZoom / 1.2, 0.1);
      applyTransform();
      updateZoomLevel();
    }
  
    function resetZoom() {
      currentZoom = 1;
      translateX = 0;
      translateY = 0;
      applyTransform();
      updateZoomLevel();
    }
  
    document.addEventListener('DOMContentLoaded', () => {
      mermaid.render('graphDiv', diagramDefinition).then(({ svg }) => {
        const container = document.getElementById('mermaid-diagram');
        if (!container) return;
        container.innerHTML = svg;
  
        diagramElement = container.querySelector('svg');
        if (!diagramElement) return;
  
        diagramElement.style.transformOrigin = 'center center';
        diagramElement.style.transition = 'transform 0.2s ease';
  
        document.getElementById('zoomIn')?.addEventListener('click', zoomIn);
        document.getElementById('zoomOut')?.addEventListener('click', zoomOut);
        document.getElementById('resetZoom')?.addEventListener('click', resetZoom);
  
        const mermaidContainer = document.getElementById('mermaid-container');
        if (!mermaidContainer) return;
  
        mermaidContainer.addEventListener('wheel', (e) => {
          e.preventDefault();
          const rect = mermaidContainer.getBoundingClientRect();
          const mouseX = e.clientX - rect.left;
          const mouseY = e.clientY - rect.top;
  
          const prevZoom = currentZoom;
  
          currentZoom = e.deltaY < 0
            ? Math.min(currentZoom * 1.1, 8)
            : Math.max(currentZoom / 1.1, 0.1);
  
          const zoomFactor = currentZoom / prevZoom;
          translateX = mouseX - (mouseX - translateX) * zoomFactor;
          translateY = mouseY - (mouseY - translateY) * zoomFactor;
  
          applyTransform();
          updateZoomLevel();
        });
  
        mermaidContainer.addEventListener('mousedown', (e) => {
          if (e.button === 0) {
            isDragging = true;
            startX = e.clientX - translateX;
            startY = e.clientY - translateY;
            mermaidContainer.style.cursor = 'grabbing';
            e.preventDefault();
          }
        });
  
        document.addEventListener('mousemove', (e) => {
          if (isDragging) {
            translateX = e.clientX - startX;
            translateY = e.clientY - startY;
            applyTransform();
          }
        });
  
        document.addEventListener('mouseup', () => {
          isDragging = false;
          const container = document.getElementById('mermaid-container');
          if (container) container.style.cursor = 'grab';
        });
  
        document.addEventListener('keydown', (e) => {
          if (e.ctrlKey || e.metaKey) {
            if (e.key === '+' || e.key === '=') {
              e.preventDefault();
              zoomIn();
            } else if (e.key === '-') {
              e.preventDefault();
              zoomOut();
            } else if (e.key === '0') {
              e.preventDefault();
              resetZoom();
            }
          }
        });
  
        updateZoomLevel();
      });
    });
  </script>
  

  <style>
    .diagram-wrapper {
      position: relative;
      width: 100%;
      height: 80vh;
      background: linear-gradient(135deg, rgba(104,16,241,0.05) 0%, rgba(124,77,255,0.05) 100%);
      border-radius: 16px;
      box-shadow: 0 8px 20px rgba(0, 0, 0, 0.15);
      overflow: hidden;
    }

    .zoom-controls {
      position: absolute;
      top: 1rem;
      right: 1rem;
      z-index: 10;
      display: flex;
      gap: 0.5rem;
      background: rgba(255, 255, 255, 0.9);
      border-radius: 8px;
      padding: 0.5rem;
      box-shadow: 0 4px 8px rgba(0,0,0,0.1);
      align-items: center;
    }

    .zoom-btn {
      border: none;
      background-color: #805ad5;
      color: white;
      font-size: 1.2rem;
      padding: 0.4rem 0.6rem;
      border-radius: 6px;
      cursor: pointer;
    }

    .zoom-btn.reset {
      background-color: #4a5568;
    }

    .zoom-btn:hover {
      opacity: 0.85;
    }

    .zoom-level {
      font-size: 0.9rem;
      color: #2d3748;
      margin-left: 0.5rem;
    }

    .mermaid-container {
      width: 100%;
      height: 100%;
      cursor: grab;
      display: flex;
      align-items: center;
      justify-content: center;
    }

    .mermaid-content {
      will-change: transform;
    }

    svg {
      max-width: none !important;
      height: auto;
    }
  </style>
</BaseLayout>
