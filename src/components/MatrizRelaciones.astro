---
// Definici√≥n de los IDs de √°rea como un tipo para mayor seguridad
type AreaId = 'desarrollo' | 'tarot' | 'filosofia' | 'psicologia' | 'fotografia';

// Interfaz para definir la estructura de un √°rea
interface Area {
  id: AreaId;
  nombre: string;
  emoji: string;
  clase: AreaId; // Asumimos que la clase CSS coincide con el ID para simplicidad
}

// Tipo para definir las posibles intensidades de una relaci√≥n
type IntensidadRelacion = 'alta' | 'media' | 'baja';

// Interfaz para definir la estructura del detalle de una relaci√≥n
interface RelacionDetalle {
  aporta: string;
  recibe: string;
  intensidad: IntensidadRelacion;
}

// Tipo para el objeto que mapea claves de relaci√≥n (e.g., 'desarrollo-tarot') a sus detalles
// Usamos Record<string, RelacionDetalle> porque las claves son combinaciones din√°micas de AreaId
type RelacionesMap = Record<string, RelacionDetalle>;

// Datos de las relaciones (ahora tipados)
const areas: Area[] = [
  { id: 'desarrollo', nombre: 'DESARROLLO', emoji: 'üíª', clase: 'desarrollo' },
  { id: 'tarot', nombre: 'TAROT', emoji: 'üîÆ', clase: 'tarot' },
  { id: 'filosofia', nombre: 'FILOSOF√çA', emoji: 'üèõÔ∏è', clase: 'filosofia' },
  { id: 'psicologia', nombre: 'PSICOLOG√çA', emoji: 'üß†', clase: 'psicologia' },
  { id: 'fotografia', nombre: 'FOTOGRAF√çA', emoji: 'üì∏', clase: 'fotografia' }
];

const relaciones: RelacionesMap = {
  'desarrollo-tarot': {
    aporta: 'Arquetipos digitales, interfaces simb√≥licas, sistemas de lectura',
    recibe: 'Intuici√≥n, lenguaje simb√≥lico, narrativas m√°gicas',
    intensidad: 'alta'
  },
  'desarrollo-filosofia': {
    aporta: 'Modelos l√≥gicos, prototipos racionales, sistemas',
    recibe: 'Preguntas fundamentales, coherencia √©tica, visi√≥n cr√≠tica',
    intensidad: 'alta'
  },
  'desarrollo-psicologia': {
    aporta: 'Experiencias interactivas, UX emocional, modelado comportamental',
    recibe: 'Procesos mentales, teor√≠as emocionales, modelos de usuario',
    intensidad: 'alta'
  },
  'desarrollo-fotografia': {
    aporta: 'Automatizaci√≥n, apps creativas, sistemas interactivos',
    recibe: 'Est√©tica visual, narrativa, composici√≥n emocional',
    intensidad: 'media'
  },
  'tarot-filosofia': {
    aporta: 'Sabidur√≠a arquet√≠pica, mapas del alma, conexi√≥n eterna',
    recibe: 'Cosmovisiones, preguntas esenciales, marco metaf√≠sico',
    intensidad: 'alta'
  },
  'tarot-psicologia': {
    aporta: 'Lectura emocional, di√°logo inconsciente, proceso terap√©utico',
    recibe: 'Teor√≠as personalidad, marcos an√°lisis, puentes terap√©uticos',
    intensidad: 'alta'
  },
  'tarot-fotografia': {
    aporta: 'Arquetipos visuales, composici√≥n simb√≥lica, iconograf√≠a',
    recibe: 'Est√©tica narrativa, color emocional, ritualidad visual',
    intensidad: 'media'
  },
  'filosofia-psicologia': {
    aporta: '√âtica existencial, reflexi√≥n mental, cr√≠tica paradigmas',
    recibe: 'Casos reales, teor√≠as psicol√≥gicas, comprobaci√≥n emp√≠rica',
    intensidad: 'alta'
  },
  'filosofia-fotografia': {
    aporta: 'Cr√≠tica est√©tica, teor√≠a imagen, interpretaci√≥n visual',
    recibe: 'Inspiraci√≥n sensible, experiencia directa, intimidad',
    intensidad: 'media'
  },
  'psicologia-fotografia': {
    aporta: 'Expresi√≥n emocional visual, documentaci√≥n del yo',
    recibe: 'Representaci√≥n est√©tica estados mentales, terapia visual',
    intensidad: 'media'
  }
};

// Funci√≥n para obtener la relaci√≥n inversa, ahora con tipos m√°s espec√≠ficos
function getRelacionInversa(areaA: AreaId, areaB: AreaId): RelacionDetalle | null {
  const key = `${areaA}-${areaB}`;
  const keyInversa = `${areaB}-${areaA}`;
  
  const relacionDirecta = relaciones[key]; // TypeScript infiere que esto es RelacionDetalle | undefined
  if (relacionDirecta) {
    return relacionDirecta;
  }
  
  const relacionInversa = relaciones[keyInversa]; // TypeScript infiere que esto es RelacionDetalle | undefined
  if (relacionInversa) {
    // Creamos un nuevo objeto para la relaci√≥n invertida, asegurando que cumple con RelacionDetalle
    const relacionTransformada: RelacionDetalle = {
      aporta: relacionInversa.recibe,
      recibe: relacionInversa.aporta,
      intensidad: relacionInversa.intensidad
    };
    return relacionTransformada;
  }
  return null;
}

// Calcular estad√≠sticas (con tipos expl√≠citos para claridad)
const totalRelaciones: number = Object.keys(relaciones).length;

const todasLasRelacionesDetalladas: RelacionDetalle[] = Object.values(relaciones);

const relacionesAltas: number = todasLasRelacionesDetalladas.filter(r => r.intensidad === 'alta').length;
const relacionesMedias: number = todasLasRelacionesDetalladas.filter(r => r.intensidad === 'media').length;
const relacionesBajas: number = todasLasRelacionesDetalladas.filter(r => r.intensidad === 'baja').length;
---

<div class="container">
  <h1>üîÑ Matriz de Relaciones - Ecosistema Yamid Rodr√≠guez</h1>
  
  <div class="leyenda">
    {areas.map(area => (
      <div class="leyenda-item">
        <div class={`leyenda-color ${area.clase}`}></div>
        {area.emoji} {area.nombre}
      </div>
    ))}
  </div>

  <div class="matriz-container">
    <table class="matriz">
      <thead>
        <tr>
          <th class="area-corner">√ÅREA</th>
          {areas.map(area => (
            <th class={`${area.clase} area-header`}>
              {area.emoji} {area.nombre}
            </th>
          ))}
        </tr>
      </thead>
      <tbody>
        {areas.map((areaFila, i) => (
          <tr>
            <td class={`${areaFila.clase} area-row`}>
              {areaFila.emoji} {areaFila.nombre}
            </td>
            {areas.map((areaColumna, j) => {
              if (i === j) {
                return <td class="diagonal-cell">√ÅREA BASE</td>;
              }
              
              // Aseguramos que pasamos AreaId a la funci√≥n
              const relacion = getRelacionInversa(areaFila.id, areaColumna.id);
              
              if (relacion) {
                return (
                  <td class="relacion-cell">
                    <div class={`intensidad intensidad-${relacion.intensidad}`}></div>
                    <div class="aporta">‚Üí Aporta:</div>
                    <div class="aporta-text">{relacion.aporta}</div>
                    <div class="recibe">‚Üê Recibe:</div>
                    <div class="recibe-text">{relacion.recibe}</div>
                  </td>
                );
              }
              
              return <td class="relacion-cell">Sin relaci√≥n definida</td>;
            })}
          </tr>
        ))}
      </tbody>
    </table>
  </div>

  <div class="estadisticas">
    <div class="stat-card">
      <div class="stat-number">{totalRelaciones}</div>
      <div class="stat-label">Relaciones Totales</div>
    </div>
    <div class="stat-card">
      <div class="stat-number">{relacionesAltas}</div>
      <div class="stat-label">Conexiones Altas</div>
    </div>
    <div class="stat-card">
      <div class="stat-number">{relacionesMedias}</div>
      <div class="stat-label">Conexiones Medias</div>
    </div>
    <div class="stat-card">
      <div class="stat-number">{areas.length}</div>
      <div class="stat-label">√Åreas Integradas</div>
    </div>
  </div>

  <div class="insights">
    <h2>üîç An√°lisis del Ecosistema</h2>
    <div class="insights-grid">
      <div class="insight-card">
        <h3>üéØ √Årea M√°s Conectada</h3>
        <p>Desarrollo y Psicolog√≠a muestran la mayor integraci√≥n con el resto del ecosistema</p>
      </div>
      <div class="insight-card">
        <h3>üåü Sinergia Principal</h3>
        <p>La combinaci√≥n Tarot-Psicolog√≠a-Filosof√≠a crea un n√∫cleo de introspecci√≥n profunda</p>
      </div>
      <div class="insight-card">
        <h3>üöÄ Potencial de Crecimiento</h3>
        <p>Fotograf√≠a puede expandir sus conexiones con Desarrollo para crear experiencias visuales interactivas</p>
      </div>
    </div>
  </div>
</div>

<style>
  :root {
    --color-primary: #c6a029; /* Dorado / Ocre */
    --color-secondary: #377082; /* Azul Petr√≥leo Oscuro */
    --color-accent1: #67a9ad; /* Aguamarina / Turquesa Claro */
    --color-dark-bg: #122629; /* Azul Muy Oscuro / Casi Negro */
    --color-green-accent: #7ba67e; /* Verde Salvia */
    --color-dark-accent2: #8f6915; /* Ocre Oscuro / Bronce */
    --color-dark-green: #36675f; /* Verde Bosque Oscuro */
    --color-steel-blue: #204f5e; /* Azul Acero Oscuro */

    --text-on-dark: #c6a029; /* Dorado para texto principal sobre fondos oscuros */
    --text-on-dark-muted: #67a9ad; /* Aguamarina para texto secundario sobre fondos oscuros */
    --text-on-light: #122629; /* Azul muy oscuro para texto sobre fondos claros/medios */
  }

  .container {
    max-width: 1400px;
    margin: 0 auto;
    background: var(--color-dark-bg);
    color: var(--text-on-dark-muted); 
    border-radius: 20px;
    box-shadow: 0 20px 40px rgba(0,0,0, 0.2); 
    padding: 30px;
    backdrop-filter: blur(5px); 
    margin-top: 20px;
    margin-bottom: 20px;
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
  }

  h1 {
    text-align: center;
    font-size: 2.5em;
    margin-bottom: 30px;
    background: linear-gradient(45deg, var(--color-primary), var(--color-accent1));
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
    text-shadow: 0 2px 4px rgba(0,0,0, 0.3);
  }

  .matriz-container {
    overflow-x: auto;
    margin-bottom: 30px;
    border-radius: 15px;
    box-shadow: 0 10px 30px rgba(0,0,0, 0.2);
  }

  .matriz {
    width: 100%;
    border-collapse: collapse;
    background: var(--color-steel-blue); 
    border-radius: 15px;
    overflow: hidden;
    min-width: 1000px;
  }

  .matriz th, .matriz td {
    padding: 15px;
    text-align: center;
    border: 1px solid var(--color-secondary); 
    position: relative;
  }

  .matriz th {
    background: linear-gradient(135deg, var(--color-dark-green), var(--color-secondary));
    color: var(--color-primary); 
    font-weight: 700;
    font-size: 1.1em;
    text-transform: uppercase;
    letter-spacing: 1px;
  }

  .area-corner {
    background: var(--color-dark-bg) !important; 
  }

  .area-header {
    writing-mode: vertical-lr;
    text-orientation: mixed;
    transform: rotate(180deg);
    font-size: 1.2em;
    font-weight: 700;
    padding: 20px 10px;
    min-width: 120px;
  }

  .area-row {
    font-weight: 700;
    font-size: 1.1em;
    text-align: left;
    padding-left: 20px;
    min-width: 150px;
  }

  /* Colores por √°rea */
  .desarrollo {
    background: var(--color-primary); 
    color: var(--text-on-light); 
  }

  .tarot {
    background: var(--color-dark-accent2); 
    color: var(--color-primary); 
  }

  .filosofia {
    background: var(--color-green-accent); 
    color: var(--text-on-light); 
  }

  .psicologia {
    background: var(--color-dark-green); 
    color: var(--color-accent1); 
  }

  .fotografia {
    background: var(--color-accent1); 
    color: var(--text-on-light); 
  }

  .relacion-cell {
    background: var(--color-steel-blue); 
    color: var(--text-on-dark-muted); 
    font-size: 0.85em;
    line-height: 1.4;
    text-align: left;
    cursor: pointer;
    transition: all 0.3s ease;
    min-height: 120px;
    vertical-align: top;
    padding: 12px;
    max-width: 200px;
  }

  .relacion-cell:hover {
    background: var(--color-secondary); 
    transform: scale(1.02);
    box-shadow: inset 0 0 0 2px var(--color-primary); 
    z-index: 10;
  }

  .diagonal-cell {
    background: linear-gradient(135deg, var(--color-dark-green), var(--color-steel-blue));
    color: var(--color-accent1); 
    font-weight: 600;
    font-size: 1.1em;
  }

  .aporta {
    color: var(--color-green-accent); 
    font-weight: 600;
    margin-bottom: 4px;
    font-size: 0.8em;
  }

  .aporta-text {
    margin-bottom: 8px;
    font-size: 0.8em;
    color: var(--text-on-dark-muted); 
  }

  .recibe {
    color: var(--color-dark-accent2); 
    font-weight: 600;
    margin-bottom: 4px;
    font-size: 0.8em;
  }

  .recibe-text {
    font-size: 0.8em;
    color: var(--text-on-dark-muted); 
  }

  .intensidad {
    position: absolute;
    top: 8px;
    right: 8px;
    width: 14px;
    height: 14px;
    border-radius: 50%;
    opacity: 0.9;
    border: 2px solid var(--color-dark-bg); 
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
  }

  .intensidad-alta {
    background: var(--color-primary); 
  }

  .intensidad-media {
    background: var(--color-green-accent); 
  }

  .intensidad-baja {
    background: var(--color-accent1); 
  }

  .leyenda {
    display: flex;
    justify-content: center;
    gap: 20px;
    margin-bottom: 30px;
    flex-wrap: wrap;
  }

  .leyenda-item {
    display: flex;
    align-items: center;
    gap: 8px;
    padding: 12px 20px;
    background: var(--color-steel-blue); 
    color: var(--text-on-dark); 
    border-radius: 25px;
    box-shadow: 0 4px 12px rgba(0,0,0, 0.2);
    font-weight: 600;
    transition: transform 0.2s ease;
  }

  .leyenda-item:hover {
    transform: translateY(-2px);
  }

  .leyenda-color {
    width: 16px;
    height: 16px;
    border-radius: 50%;
    border: 2px solid var(--color-secondary); 
  }

  .estadisticas {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 20px;
    margin-bottom: 40px;
  }

  .stat-card {
    background: linear-gradient(135deg, var(--color-steel-blue), var(--color-secondary));
    padding: 25px;
    border-radius: 15px;
    text-align: center;
    box-shadow: 0 6px 20px rgba(0,0,0, 0.2);
    transition: transform 0.3s ease;
  }

  .stat-card:hover {
    transform: translateY(-5px);
  }

  .stat-number {
    font-size: 2.5em;
    font-weight: 700;
    color: var(--color-primary); 
    margin-bottom: 10px;
    text-shadow: 0 2px 4px rgba(0,0,0, 0.2);
  }

  .stat-label {
    font-weight: 600;
    color: var(--color-accent1); 
    text-transform: uppercase;
    letter-spacing: 1px;
    font-size: 0.9em;
  }

  .insights {
    margin-top: 40px;
  }

  .insights h2 {
    text-align: center;
    font-size: 2em;
    margin-bottom: 30px;
    color: var(--color-primary); 
  }

  .insights-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 25px;
  }

  .insight-card {
    background: linear-gradient(135deg, var(--color-secondary), var(--color-steel-blue));
    color: var(--text-on-dark); 
    padding: 25px;
    border-radius: 15px;
    box-shadow: 0 10px 25px rgba(0, 0, 0, 0.3);
    transition: transform 0.3s ease;
  }

  .insight-card:hover {
    transform: translateY(-5px) scale(1.02);
  }

  .insight-card h3 {
    margin-bottom: 15px;
    font-size: 1.3em;
    color: var(--color-primary); 
  }

  .insight-card p {
    line-height: 1.6;
    opacity: 0.9;
    color: var(--text-on-dark-muted); 
  }

  /* Responsivo */
  @media (max-width: 768px) {
    .container {
      padding: 20px;
      margin: 10px;
    }

    h1 {
      font-size: 2em;
    }

    .leyenda {
      gap: 10px;
    }

    .leyenda-item {
      padding: 8px 15px;
      font-size: 0.9em;
    }

    .matriz th, .matriz td {
      padding: 10px 8px;
    }

    .relacion-cell {
      font-size: 0.75em;
      min-height: 100px;
    }

    .area-header {
      font-size: 1em;
      padding: 15px 5px;
    }

    .area-row {
      font-size: 1em;
    }

    .stat-number {
      font-size: 2em;
    }

    .insights-grid {
      grid-template-columns: 1fr;
    }
  }
</style>